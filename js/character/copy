class Pawn extends Phaser.Physics.Arcade.Sprite{
    /**
     * 
     * @param {*} scene 
     * @param {*} x 
     * @param {*} y 
     * @param {*} texture 图片的key
     * @param {*} bFace2Right_Asset 精灵集默认朝向，右为true
     * @param {*} orientation_Start 
     */
    constructor(scene, x, y, texture, bFace2Right_Asset, orientation_Start){
        super(scene, x, y, texture);             

        //属性设置
        /** 精灵图集*/      
        
        this.moving = false;
        //上一帧的速率
        this.velocity_Last = {x: 0 , y: 0};
        
        this.hp = 100;
        this.dead = false;

        //#region   //———————————————————攻击————————————————————//
        /**攻击 */
        this.attack = false;
        /**攻击力 */
        this.attackDamage = 50;
        /**攻击间隔 */
        this.attackInterval = 1000;//1秒
        /**能否攻击 */
        this.canAttack = false;
        /**上次攻击后，到现在的时间 */
        this.attackTime_LastPassed = 0;
        //#endregion    //———————————————————攻击————————————————————//

        /**阵营 */
        this.groupTag = 'A';

        //开启物理
        scene.physics.world.enable(this);
        //添加自身到场景
        scene.add.existing(this);   

        /**朝向 left right up down*/
        this.orientation = 'right';        
        this.bFace2Right_Asset = bFace2Right_Asset;
        this.setFlipX(this.bFace2Right_Asset);
        this.setOrientation_Start(orientation_Start);

        this.offset_Loc = {x: 0, y: 0};
        this.offset_Size = {x: 0, y: 0};

        
    }

    //性能原因，官方说需手动调用
    create(){
        //console.log('pawn create');   
        this.addCheckBox_Attack();
        console.log(this)
        //event , fn , The context to invoke the listener with.
        this.scene.events.once('death2Do_Once', this.death2Do, this);
    }
    
//     //  Here is our event listener, the 'handler' function. The 'this' argument is the context.
//     this.events.on('chatsubo', this.handler, this);

//     //  We'll use the Scenes own EventEmitter to dispatch our event
//     this.events.emit('chatsubo');
// }

// handler ()
// {
//     this.add.image(400, 300, 'neuro');
// }

    death2Do(){
        this.play('die', true);
        //console.log(this)
    }

    update(time,delta){      

        if(this.hp <= 0){
            this.dead = true;

            this.scene.events.emit('death2Do_Once');
        }

        if(!this.dead){
            //———————————————————攻击间隔检测————————————————————//
            this.attackTime_LastPassed += delta;
            if(this.attackTime_LastPassed > this.attackInterval){
                this.canAttack = true;
            }
            //———————————————————————————————————————————————————//

            //console.log(time + '  ---- ' + delta);

            // this.animPlay_Move();
            // this.setOrientation();
            //this.freshCheckBox_Attack();


            if(this.moving){
                this.play('walk', true);//play(key [, ignoreIfPlaying])            
            }
            else{
                if(this.anims.getName() != 'Punch'){
                    this.play('idle', true);
                }
            }
                
        }

        
    }

    addCheckBox_Attack(){
        this.checkBox_Attack = this.scene.add.rectangle(
            this.x + this.offset_Loc.x, 
            this.y + this.offset_Loc.y, 
            this.displayWidth/2 + this.offset_Size.x, 
            this.displayHeight + this.offset_Size.y
        ).setStrokeStyle(1, 0x00ffff);
    }

    /**刷新攻击盒子检测*/
    freshCheckBox_Attack(){

        //检测盒子移动_辅助查看
        switch (this.orientation) {
            case 'right':
                this.checkBox_Attack.x = this.x + this.offset_Loc.x + this.displayWidth/2;
                this.checkBox_Attack.y = this.y;
                break;
            case 'left':
                this.checkBox_Attack.x = this.x - this.offset_Loc.x - this.displayWidth/2;
                this.checkBox_Attack.y = this.y;
                break
        }

        //将检测盒子的大小及位置传递给overlapRect
        //overlapRect原点位置在左上角，需减去一半
        let x = this.checkBox_Attack.x - (this.checkBox_Attack.displayWidth / 2);
        let y = this.checkBox_Attack.y - (this.checkBox_Attack.displayHeight / 2);               
        let within = this.scene.physics.overlapRect(
            x, 
            y, 
            this.checkBox_Attack.displayWidth, 
            this.checkBox_Attack.displayHeight
        );
        /**敌人在攻击范围内？ */
        let enemyInRange = false;
        within.forEach(body => {        
            if(body.gameObject.groupTag != this.groupTag){
                enemyInRange = true;
                body.gameObject.setTint(0xff0000);       
                this.hp -= this.attackDamage;
            }                                    
        });
        
// this.add.sprite(x, y).play({ key: 'run', frameRate: 24 ,delay: 0});
        if(this.canAttack && enemyInRange){
            this.play('punch', true).on('animationcomplete', ()=>{
                this.canAttack = false;
                this.attackTime_LastPassed = 0;
                enemyInRange = false;
            })
        }  
    }



    /**
     * 设置朝向
     */
    setOrientation(){
        let x = this.body.velocity.x;
        if(x != 0){
            if(x > 0){
                this.orientation = 'right';
                this.setFlipX(!this.bFace2Right_Asset)
            }else{
                this.orientation = 'left';
                this.setFlipX(this.bFace2Right_Asset)
            }
        }
    }
    /**
     * 初始朝向
     * @param {*} orientation_Start 
     */
    setOrientation_Start(orientation_Start){
        this.orientation = orientation_Start;
        switch (orientation_Start) {
            case 'right':
                this.setFlipX(!this.bFace2Right_Asset)
                break;
            case 'left':
                this.setFlipX(this.bFace2Right_Asset)
                break;
        }
    }


    /**移动动画 */
    animPlay_Move(){
        let animName = this.anims.getName();
        if(this.getSpeed() > 1){               
            this.play('walk', true);//play(key [, ignoreIfPlaying])                
        }else{
            if(animName !== 'punch')
                this.play('idle', true);
        }
    }


    // /**
    //  * 移动到目标
    //  * @param {*} target 目标 具有x,y位置对象
    //  * @param {*} velocity 速率
    //  */
    moveToObject(target, velocity){
        this.scene.physics.moveToObject(this, target, velocity);
    }


    moveTo(locX, locY, time){
        var tween = this.scene.tweens.add({
            targets: this,
            x: locX,
            y: locY,
            ease: 'Power0',
            duration: time,
            yoyo: false,
            repeat: 0,
            onStart: function () { console.log('onStartmove'); console.log(arguments); this.moving = true;},
            onComplete: function () { console.log('onComplete'); console.log(arguments); this.moving = false;},
            onYoyo: function () { console.log('onYoyo'); console.log(arguments); },
            onRepeat: function () { console.log('onRepeat'); console.log(arguments); },
        });
    }

    /**得到距离*/
    getDistance(obj1, obj2){
        return Phaser.Math.Distance.Between(obj1.x, obj1.y, obj2.x, obj2.y);
    }

    /** 
     * 得到速度
    */
    getSpeed(){
        return this.body.velocity.length();
    }



    // /**从目标组发现一个最近目标*/
    // findNearest(group){
    //     const children = group.getChildren();
    //     let distance = this.getDistance(this, children[0]);
    //     let distance_temp;s
    //     let targetIndex = 0;
    //     for(let i = 1; i < group.getLength(); ++i){            
    //         distance_temp = this.getDistance(this, children[i]);
    //         if(distance > distance_temp){
    //             distance = distance_temp;
    //             targetIndex = i;
    //         }
    //     }      
    //     return group.getChildren()[targetIndex];
    // }

    // /**刷新攻击盒子检测*/
    // freshCheckBox_Attack(group){
    //     group.getChildren().forEach(item => {

    //         item.checkBox_Attack.x = item.x;
    //         item.checkBox_Attack.y = item.y;
    //         let x = item.checkBox_Attack.x - (item.checkBox_Attack.width / 2);
    //         let y = item.checkBox_Attack.y - (item.checkBox_Attack.height / 2);            
            
    //         let canAttack = false;

    //         let within = this.scene.physics.overlapRect(x, y, item.checkBox_Attack.width, item.checkBox_Attack.height);
    //         within.forEach(function (body) {                 
    //             if(body.gameObject.groupTag != item.groupTag){
    //                 canAttack = true;
    //                 body.gameObject.setTint(0xff0000);                
    //             }                                    
    //         });
    //         if(canAttack){
    //             item.play('punch', true).on('animationcomplete', ()=>{
    //                 canAttack = false;
    //             })
    //         }  
    //     });
    // }
}
// export default Pawn;